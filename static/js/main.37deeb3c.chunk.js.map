{"version":3,"sources":["SeasonDisplay.js","Spinner.js","index.js"],"names":["seasonConfig","Summer","text","iconName","Winter","SeasonDisplay","props","lat","month","season","Date","getMonth","className","Spinner","message","defaultProps","App","state","errorMessage","renderContent","window","navigator","geolocation","getCurrentPosition","position","setState","coords","latitude","err","this","React","Component","ReactDOM","render","document","querySelector"],"mappings":"kNAGMA,G,MAAe,CACjBC,OAAQ,CACJC,KAAM,sBACNC,SAAU,OAGdC,OAAQ,CACJF,KAAM,kBACNC,SAAU,eA0BHE,EAdO,SAACC,GACnB,IATeC,EAAKC,EASdC,GATSF,EASUD,EAAMC,KATXC,GASgB,IAAIE,MAAOC,YARnC,GAAKH,EAAQ,EACdD,EAAM,EAAI,SAAW,SAErBA,EAAM,EAAI,SAAW,UAIH,EAEHP,EAAaS,GAAhCP,EAFsB,EAEtBA,KAAMC,EAFgB,EAEhBA,SAGb,OACD,sBAAKS,UAAS,yBAAoBH,GAAlC,UACC,mBAAGG,UAAS,UAAKT,EAAL,6BACZ,6BAAKD,IACL,mBAAGU,UAAS,UAAKT,EAAL,kCC9BVU,EAAU,SAACP,GAChB,OACC,qBAAKM,UAAU,mBAAf,SACU,qBAAKA,UAAU,qBAAf,SAAsCN,EAAMQ,aAKxDD,EAAQE,aAAe,CACnBD,QAAS,cAGED,QCTTG,E,4MAEFC,MAAQ,CAACV,IAAK,KAAMW,aAAc,I,EASlCC,cAAgB,WACZ,OAAI,EAAKF,MAAMC,eAAiB,EAAKD,MAAMV,IACzC,0CAAa,EAAKU,MAAMC,iBAG3B,EAAKD,MAAMC,cAAgB,EAAKD,MAAMV,IAC1B,cAAC,EAAD,CAAeA,IAAM,EAAKU,MAAMV,MAG1C,cAAC,EAAD,CAASO,QAAQ,oC,kEAhBJ,IAAD,OACnBM,OAAOC,UAAUC,YAAYC,oBAC5B,SAACC,GAAD,OAAc,EAAKC,SAAS,CAAElB,IAAKiB,EAASE,OAAOC,cACnD,SAACC,GAAD,OAAS,EAAKH,SAAS,CAAEP,aAAcU,EAAId,e,+BAiBtC,OACI,qBAAKF,UAAU,aAAf,SACKiB,KAAKV,sB,GA1BJW,IAAMC,WAiCxBC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,cAAc,Y","file":"static/js/main.37deeb3c.chunk.js","sourcesContent":["import './seasonDisplay.css';\nimport React from 'react';\n\nconst seasonConfig = {\n    Summer: {\n        text: 'Let\\'s hit the beach',\n        iconName: 'sun'\n    },\n\n    Winter: {\n        text: 'Burr it is cold',\n        iconName: 'snowflake'\n    }\n};\n\nconst getSeason = (lat, month) => {\n    if (month > 2 && month < 9) {\n        return lat > 0 ? 'Summer' : 'Winter';\n    } else {\n        return lat > 0 ? 'Winter' : 'Summer';\n    }\n};\n\nconst SeasonDisplay = (props) => {\n    const season = getSeason(props.lat, new Date().getMonth());\n    const {text, iconName } = seasonConfig[season];\n\n    \n    return (\n\t\t\t<div className={`season-display ${season}`}>\n\t\t\t\t<i className={`${iconName} icon massive icon-left`} />\n\t\t\t\t<h1>{text}</h1>\n\t\t\t\t<i className={`${iconName} icon massive icon-right`} />\n\t\t\t</div>\n\t\t);\n};\n\nexport default SeasonDisplay;","import React from \"react\";\n\nconst Spinner = (props) => {\n\treturn (\n\t\t<div className='ui active dimmer'>\n            <div className='ui big text loader'>{ props.message}</div>\n\t\t</div>\n\t);\n};\n\nSpinner.defaultProps = {\n    message: 'Loading...'\n}\n\nexport default Spinner;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport SeasonDisplay from './SeasonDisplay';\nimport Spinner from './Spinner';\n\nclass App extends React.Component {\n    \n    state = {lat: null, errorMessage: \"\" };\n\n\tcomponentDidMount() {\n\t\twindow.navigator.geolocation.getCurrentPosition(\n\t\t\t(position) => this.setState({ lat: position.coords.latitude }),\n\t\t\t(err) => this.setState({ errorMessage: err.message })\n\t\t);\n    }\n    \n    renderContent = () => {\n        if (this.state.errorMessage && !this.state.lat) {\n\t\t\treturn <div>Error: {this.state.errorMessage}</div>;\n\t\t}\n\n\t\tif (!this.state.errorMessage && this.state.lat) {\n            return <SeasonDisplay lat={ this.state.lat}/>\n\t\t}\n\n\t\treturn <Spinner message=\"Please accept location request\"/>\n    }\n\n    render() {\n        return (\n            <div className=\"border red\">\n                {this.renderContent()}\n            </div>\n        )\n\t\t\n\t}\n}\n\nReactDOM.render(<App />, document.querySelector(\"#root\"));\n"],"sourceRoot":""}